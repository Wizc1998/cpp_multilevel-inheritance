Question 1. In main add an object b of class B. Set the pointer ptr to point to b. Add a protected variable varB to B and a constructor to initialize it to 0. Add a print() method in B so that both var and varB are printed. Which print method is called on the object B referenced by ptr? If needed, change method declarations so that the print method of B is called for the B object. What did you need to change and why?
---
Answer: the print method of class A was called for the B object.
To change this, just add a virtual keywork in front of declaration of both print methods.


Question 2. Assuming that a is a variable of type A, b is an object of type B, and ptr is the pointer of type A, what would you expect to be printed by the following statement:
  a = b;
  a.print();
  ptr = &a;
  ptr -> print();
What gets printed? Why? Explain the difference in behavior between this example and Question 1.
----
As a result, this printing method of A class got called, and var got printed. This is before even a = b, however, a is still of a class A, a = b just simply transferred the value in b, but not the data type. And the pointer is also pointing to address of this type A value. The difference in behavior, is that in question 1, the pointer was pointed to an address of type B value, b. So, it would call the method in class B.


Question 3. What happens if you have an object b of class B and you call the print method like this: b.A::print()?
----
It would call the print method in class A.


Question 4. Write a function that takes an object of class A and returns it. Can you pass an object of a class B to this function?

----
Function:
A pass(A a){
	return a;
}

Yes, it did works fine with a B class value as parameter.


Question 5. What happens if you change the declaration
class B : public A
to
class B : A ?
----
it makes class A becomes an inaccessible base of class B.

